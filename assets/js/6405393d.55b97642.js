"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[644],{9241:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var i=s(5893),a=s(1151);s(9524);const t={},r="Finishing Sync",d={id:"ios-app-changes/finishing-sync",title:"Finishing Sync",description:"We have a problem",source:"@site/docs/3--ios-app-changes/8-finishing-sync.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/finishing-sync",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/finishing-sync",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/8-finishing-sync.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding ownerId",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/adding-owner-id"},next:{title:"Checking our data",permalink:"/swiftui-atlas-sync-app-lab/docs/category/checking-our-data"}},o={},c=[{value:"Fixing the model: remove Days class",id:"fixing-the-model-remove-days-class",level:2},{value:"Add ownerId field to Day class",id:"add-ownerid-field-to-day-class",level:2},{value:"Remove sync on Days and add sync info to Day",id:"remove-sync-on-days-and-add-sync-info-to-day",level:2},{value:"Set ownerId while creating a new Day",id:"set-ownerid-while-creating-a-new-day",level:2},{value:"Add ownerId when creating the initial set of Habits",id:"add-ownerid-when-creating-the-initial-set-of-habits",level:2},{value:"Testing it",id:"testing-it",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"finishing-sync",children:"Finishing Sync"}),"\n",(0,i.jsx)(n.p,{children:"We have a problem: while syncing habits we're using our user id, but not while syncing our days. From the sync config code, these are the subscriptions we're adding:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:'                    subs.append(QuerySubscription<Days>(name: "user_days", query: { \n                        $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Day>())\n\n                    subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                        $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Habit>())\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When we add a ",(0,i.jsx)(n.code,{children:"Day"})," we never set the ",(0,i.jsx)(n.code,{children:"ownerId"})," because our model class ",(0,i.jsx)(n.code,{children:"Day"})," doesn't have it. So when we insert a new ",(0,i.jsx)(n.code,{children:"Day"})," it will appear for all users, as we're getting ",(0,i.jsx)(n.code,{children:"Day"})," from all users, because we're not restricting the sync here:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:"                    subs.append(QuerySubscription<Day>())\n"})}),"\n",(0,i.jsx)(n.p,{children:"So we need to do two things:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"subscribe just to our Days"}),"\n",(0,i.jsxs)(n.li,{children:["add the ",(0,i.jsx)(n.code,{children:"ownnerId"})," when we create a new ",(0,i.jsx)(n.code,{children:"Day"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fixing-the-model-remove-days-class",children:"Fixing the model: remove Days class"}),"\n",(0,i.jsx)(n.p,{children:"Let's get rid of Days, as we don't really use that class for anything."}),"\n",(0,i.jsx)(n.h2,{id:"add-ownerid-field-to-day-class",children:"Add ownerId field to Day class"}),"\n",(0,i.jsxs)(n.p,{children:["We;ll add the ",(0,i.jsx)(n.code,{children:"ownerId"})," field to the Day class."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="Day.swift"',children:'import Foundation\nimport RealmSwift\n\npublic class Day: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var date = Date()\n    @Persisted var habits = RealmSwift.List<Habit>()\n\n    @Persisted var ownerId = ""\n\n    // ... same as before\n'})}),"\n",(0,i.jsx)(n.h2,{id:"remove-sync-on-days-and-add-sync-info-to-day",children:"Remove sync on Days and add sync info to Day"}),"\n",(0,i.jsxs)(n.p,{children:["We'll delete the sync subscription on ",(0,i.jsx)(n.code,{children:"Days"})," (as we just deleted that class) and add the correct subscription for ",(0,i.jsx)(n.code,{children:"Day"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:'        if let foundSubscription = subs.first(named: "user_days") {\n            return\n        } else {\n            subs.append(QuerySubscription<Day>(name: "user_days", query: {\n                $0.ownerId == user.id\n            }))\n\n            subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                $0.ownerId == user.id\n            }))\n            subs.append(QuerySubscription<Habit>())\n        }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"set-ownerid-while-creating-a-new-day",children:"Set ownerId while creating a new Day"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="DaysView.swift"',children:'    let day = Day.createDayWithHabitsInRealm(realm: realm)\n\n    day.ownerId = realm.syncSession?.parentUser()?.id ?? ""\n    try? realm.write({\n        $days.append(day)\n    })\n'})}),"\n",(0,i.jsx)(n.h2,{id:"add-ownerid-when-creating-the-initial-set-of-habits",children:"Add ownerId when creating the initial set of Habits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="MainView.swift"',children:'    ProgressView()\n        .onAppear {\n            let habits = Habits()\n            habits.ownerId = realm.syncSession?.parentUser()?.id ?? ""\n            $allHabitGroups.append(habits)\n        }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-it",children:"Testing it"}),"\n",(0,i.jsx)(n.p,{children:"Now if we run the app new days are not appearing in other users' apps."})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>r});var i=s(7294);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);