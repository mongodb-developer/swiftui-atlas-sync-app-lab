"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[673],{4137:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",w={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,m=u["".concat(s,".").concat(d)]||u[d]||w[d]||a;return t?r.createElement(m,o(o({ref:n},l),{},{components:t})):r.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>w,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const a={},o="SyncContentView",p={unversionedId:"ios-app-changes/synccontentview",id:"ios-app-changes/synccontentview",title:"SyncContentView",description:"Create SyncContentView",source:"@site/docs/3--ios-app-changes/2-synccontentview.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/synccontentview",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/synccontentview",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/2-synccontentview.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add an App id",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/add-app-id"},next:{title:"Running the App",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/running-app"}},s={},c=[{value:"Create SyncContentView",id:"create-synccontentview",level:2},{value:"SyncContentView Preview",id:"synccontentview-preview",level:2}],l={toc:c},u="wrapper";function w(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"synccontentview"},"SyncContentView"),(0,i.kt)("h2",{id:"create-synccontentview"},"Create SyncContentView"),(0,i.kt)("p",null,"This view observes the Realm app object. Either directs the user to login, or opens a realm with a logged-in user."),(0,i.kt)("p",null,"The 1st time we open the app there is no logged in user, so we'll check ",(0,i.kt)("inlineCode",{parentName:"p"},"app.currentUser")," and show the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProgressView"),". This ",(0,i.kt)("inlineCode",{parentName:"p"},"ProgressView")," will run an async task to ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," our app to login, using the Atlas App. Here we use ",(0,i.kt)("inlineCode",{parentName:"p"},".anonymous")," authentication, although we have several other ways to do authentication (configurable in Atlas)."),(0,i.kt)("p",null,"Once the login succeeds, there will be a user in ",(0,i.kt)("inlineCode",{parentName:"p"},"app.currentUser"),". As we're observing changes in ",(0,i.kt)("inlineCode",{parentName:"p"},"app"),", we'll enter the ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),' part and show a "Logged In!" ',(0,i.kt)("inlineCode",{parentName:"p"},"Text")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='SyncContentView.swift'",title:"'SyncContentView.swift'"},'import SwiftUI\nimport RealmSwift\n\nstruct SyncContentView: View {\n    // Observe the Realm app object in order to react to login state changes.\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        if let user = app.currentUser {\n            // If there is a user logged in\n            Text("Logged in \\(user)")\n        } else {\n            // If there is no user logged in, show the login view.\n            ProgressView()\n                .task{\n                    do {\n                        let myUser = try await app.login(credentials: .anonymous)\n                    } catch {\n                        print("\\(error)")\n                    }\n                }\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"synccontentview-preview"},"SyncContentView Preview"),(0,i.kt)("p",null,"We need to inject an App, as SyncContentView observes the Realm app object, so we create a dummy ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmSwift.App")," with no App ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='SyncContentView.swift'",title:"'SyncContentView.swift'"},'struct SyncContentView_Previews: PreviewProvider {\n\n    static let app: RealmSwift.App? = RealmSwift.App(id: "none")\n\n    static var previews: some View {\n        SyncContentView(app: app!)\n    }\n}\n')))}w.isMDXComponent=!0}}]);