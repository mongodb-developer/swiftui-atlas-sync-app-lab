"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[841],{2742:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=i(5893),o=i(1151);i(9524);const s={},a="Adding the Flexible Sync Configuration",r={id:"ios-app-changes/adding-config-realm",title:"Adding the Flexible Sync Configuration",description:"Las thing we need to do is to pass this information to a new view, OpenSyncedRealmView, that will open the connection with our App and go through all the states needed while logging in our app.",source:"@site/docs/3--ios-app-changes/5-adding-config-realm.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/adding-config-realm",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/adding-config-realm",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/5-adding-config-realm.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flexible configuration",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/flexible-configuration"},next:{title:"OpenSyncedRealmView",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/open-synced-realm-view"}},l={},c=[{value:"Create OpenSyncedRealmView",id:"create-opensyncedrealmview",level:2},{value:"Using our config",id:"using-our-config",level:2},{value:"Final listing for SyncContentView",id:"final-listing-for-synccontentview",level:2},{value:"Log",id:"log",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"adding-the-flexible-sync-configuration",children:"Adding the Flexible Sync Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Las thing we need to do is to pass this information to a new view, ",(0,t.jsx)(n.code,{children:"OpenSyncedRealmView"}),", that will open the connection with our App and go through all the states needed while logging in our app."]}),"\n",(0,t.jsx)(n.h2,{id:"create-opensyncedrealmview",children:"Create OpenSyncedRealmView"}),"\n",(0,t.jsxs)(n.p,{children:["Create a new SwiftUI view, add an ",(0,t.jsx)(n.code,{children:"app"})," property. We'll need to add that argument to the preview call."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="OpenSyncedRealmView"',children:'import SwiftUI\nimport RealmSwift\n\nstruct OpenSyncedRealmView: View {\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        Text("Hello, World!")\n    }\n}\n\nstruct OpenSyncedRealmView_Previews: PreviewProvider {\n    static var previews: some View {\n        OpenSyncedRealmView(app: RealmSwift.App(id: ""))\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-our-config",children:"Using our config"}),"\n",(0,t.jsxs)(n.p,{children:["We'll use our ",(0,t.jsx)(n.code,{children:"config"})," in place of the default environment ",(0,t.jsx)(n.code,{children:"\\.realmConfiguration"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:'// Remove this\n//            Text("Logged in \\(user)")\n\nOpenSyncedRealmView(app: app)\n                .environment(\\.realmConfiguration, config)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"final-listing-for-synccontentview",children:"Final listing for SyncContentView"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:'import SwiftUI\nimport RealmSwift\n\nstruct SyncContentView: View {\n    // Observe the Realm app object in order to react to login state changes.\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        if let user = app.currentUser {\n            // If there is a user logged in\n\n            // Create a `flexibleSyncConfiguration` with `initialSubscriptions`.\n            // We\'ll inject this configuration as an environment value to use when opening the realm\n            // in the next view, and the realm will open with these initial subscriptions.\n            let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in\n            // Check whether the subscription already exists. Adding it more\n            // than once causes an error.\n            if let foundSubscriptions = subs.first(named: "user_days") {\n                    // Existing subscription found - do nothing\n                    return\n            } else {\n                    // Add queries for any objects you want to use in the app\n                    // Linked objects do not automatically get queried, so you\n                    // must explicitly query for all linked objects you want to include\n                    subs.append(QuerySubscription<Days>(name: "user_days", query: {\n                    // Query for objects where the ownerId is equal to the app\'s current user\'s id\n                    // This means the app\'s current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Day>())\n                    subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                    // Query for objects where the ownerId is equal to the app\'s current user\'s id\n                    // This means the app\'s current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Habit>())\n            }\n            })\n\n            OpenSyncedRealmView(app: app)\n                .environment(\\.realmConfiguration, config)\n        } else {\n            // If there is no user logged in, show the login view.\n            ProgressView()\n                .task{\n                    do {\n                        let myUser = try await app.login(credentials: .anonymous)\n                    } catch {\n                        print("\\(error)")\n                    }\n                }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"log",children:"Log"}),"\n",(0,t.jsx)(n.p,{children:"If you look at the logs you'll see messages like"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2023-07-05 17:59:39.708589+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Session[1]: client_reset_config = false, Realm exists = true, client reset = false\n2023-07-05 17:59:39.928362+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connected to endpoint 'redacted-ip:443' (from 'my-ip:60529')\n2023-07-05 17:59:41.038822+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Connected to app services with request id: \"64ah936ca2df64d089058fe9\"\n2023-07-05 17:59:41.648668+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Session[1]: Begin processing pending FLX bootstrap for query version 0. (changesets: 1, original total changeset size: 0)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var t=i(7294);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);