"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[591],{2786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(5893),p=t(1151);const i={},s="Add an App id",o={id:"ios-app-changes/add-app-id",title:"Add an App id",description:"App id",source:"@site/docs/3--ios-app-changes/1-add-app-id.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/add-app-id",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/add-app-id",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/1-add-app-id.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"iOS App Changes",permalink:"/swiftui-atlas-sync-app-lab/docs/category/ios-app-changes"},next:{title:"SyncContentView",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/synccontentview"}},c={},d=[{value:"App id",id:"app-id",level:2},{value:"SyncContentView",id:"synccontentview",level:2}];function r(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,p.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"add-an-app-id",children:"Add an App id"}),"\n",(0,a.jsx)(n.h2,{id:"app-id",children:"App id"}),"\n",(0,a.jsxs)(n.p,{children:["In the App, we'll add a reference to the Atlas Services App we've created before. In App Services, ",(0,a.jsx)(n.a,{href:"/docs/app-services/create-a-new-app#app-id",children:"find and copy the App ID"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",metastring:"title='GoodHabitsRealmApp.swift' ",children:'    let app: RealmSwift.App? = RealmSwift.App(id: "My App Id")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"synccontentview",children:"SyncContentView"}),"\n",(0,a.jsxs)(n.p,{children:["To wait for the connection, do login, etc. we'll use a view that will take care of the different connection states our app will have. This new View is called ",(0,a.jsx)(n.a,{href:"/docs/ios-app-changes/synccontentview",children:(0,a.jsx)(n.code,{children:"SyncContentView"})}),", son we'll show that on App Startup."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",metastring:"title='GoodHabitsRealmApp.swift' ",children:'import SwiftUI\nimport RealmSwift\n\n@main\nstruct GoodHabitsRealmAppApp: SwiftUI.App {\n\n    let app: RealmSwift.App? = RealmSwift.App(id: "My App Id")\n\n    var body: some Scene {\n        WindowGroup {\n            SyncContentView(app: app!)\n        }\n    }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,p.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var a=t(7294);const p={},i=a.createContext(p);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(p):e.components||p:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);