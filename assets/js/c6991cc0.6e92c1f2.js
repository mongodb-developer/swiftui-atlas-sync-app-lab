"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[841],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=r,g=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return t?i.createElement(g,o(o({ref:n},c),{},{components:t})):i.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(7462),r=(t(7294),t(4137));t(9524);const a={},o="Adding the Flexible Sync Configuration",s={unversionedId:"ios-app-changes/adding-config-realm",id:"ios-app-changes/adding-config-realm",title:"Adding the Flexible Sync Configuration",description:"Las thing we need to do is to pass this information to a new view, OpenSyncedRealmView, that will open the connection with our App and go through all the states needed while logging in our app.",source:"@site/docs/3--ios-app-changes/5-adding-config-realm.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/adding-config-realm",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/adding-config-realm",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/5-adding-config-realm.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flexible configuration",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/flexible-configuration"},next:{title:"OpenSyncedRealmView",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/open-synced-realm-view"}},l={},p=[{value:"Create OpenSyncedRealmView",id:"create-opensyncedrealmview",level:2},{value:"Using our config",id:"using-our-config",level:2},{value:"Final listing for SyncContentView",id:"final-listing-for-synccontentview",level:2},{value:"Log",id:"log",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-the-flexible-sync-configuration"},"Adding the Flexible Sync Configuration"),(0,r.kt)("p",null,"Las thing we need to do is to pass this information to a new view, ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenSyncedRealmView"),", that will open the connection with our App and go through all the states needed while logging in our app."),(0,r.kt)("h2",{id:"create-opensyncedrealmview"},"Create OpenSyncedRealmView"),(0,r.kt)("p",null,"Create a new SwiftUI view, add an ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," property. We'll need to add that argument to the preview call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="OpenSyncedRealmView"',title:'"OpenSyncedRealmView"'},'import SwiftUI\nimport RealmSwift\n\nstruct OpenSyncedRealmView: View {\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        Text("Hello, World!")\n    }\n}\n\nstruct OpenSyncedRealmView_Previews: PreviewProvider {\n    static var previews: some View {\n        OpenSyncedRealmView(app: RealmSwift.App(id: ""))\n    }\n}\n')),(0,r.kt)("h2",{id:"using-our-config"},"Using our config"),(0,r.kt)("p",null,"We'll use our ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," in place of the default environment ",(0,r.kt)("inlineCode",{parentName:"p"},"\\.realmConfiguration"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SyncContentView.swift"',title:'"SyncContentView.swift"'},'// Remove this\n//            Text("Logged in \\(user)")\n\nOpenSyncedRealmView(app: app)\n                .environment(\\.realmConfiguration, config)\n')),(0,r.kt)("h2",{id:"final-listing-for-synccontentview"},"Final listing for SyncContentView"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SyncContentView.swift"',title:'"SyncContentView.swift"'},'import SwiftUI\nimport RealmSwift\n\nstruct SyncContentView: View {\n    // Observe the Realm app object in order to react to login state changes.\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        if let user = app.currentUser {\n            // If there is a user logged in\n\n            // Create a `flexibleSyncConfiguration` with `initialSubscriptions`.\n            // We\'ll inject this configuration as an environment value to use when opening the realm\n            // in the next view, and the realm will open with these initial subscriptions.\n            let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in\n            // Check whether the subscription already exists. Adding it more\n            // than once causes an error.\n            if let foundSubscriptions = subs.first(named: "user_days") {\n                    // Existing subscription found - do nothing\n                    return\n            } else {\n                    // Add queries for any objects you want to use in the app\n                    // Linked objects do not automatically get queried, so you\n                    // must explicitly query for all linked objects you want to include\n                    subs.append(QuerySubscription<Days>(name: "user_days", query: {\n                    // Query for objects where the ownerId is equal to the app\'s current user\'s id\n                    // This means the app\'s current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Day>())\n                    subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                    // Query for objects where the ownerId is equal to the app\'s current user\'s id\n                    // This means the app\'s current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Habit>())\n            }\n            })\n\n            OpenSyncedRealmView(app: app)\n                .environment(\\.realmConfiguration, config)\n        } else {\n            // If there is no user logged in, show the login view.\n            ProgressView()\n                .task{\n                    do {\n                        let myUser = try await app.login(credentials: .anonymous)\n                    } catch {\n                        print("\\(error)")\n                    }\n                }\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"log"},"Log"),(0,r.kt)("p",null,"If you look at the logs you'll see messages like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2023-07-05 17:59:39.708589+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Session[1]: client_reset_config = false, Realm exists = true, client reset = false\n2023-07-05 17:59:39.928362+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connected to endpoint 'redacted-ip:443' (from 'my-ip:60529')\n2023-07-05 17:59:41.038822+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Connected to app services with request id: \"64ah936ca2df64d089058fe9\"\n2023-07-05 17:59:41.648668+0200 GoodHabitsRealmApp[71190:9845203] Sync: Connection[1]: Session[1]: Begin processing pending FLX bootstrap for query version 0. (changesets: 1, original total changeset size: 0)\n")))}d.isMDXComponent=!0}}]);