"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[644],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>w});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(t),y=i,w=c["".concat(l,".").concat(y)]||c[y]||u[y]||r;return t?a.createElement(w,s(s({ref:n},p),{},{components:t})):a.createElement(w,s({ref:n},p))}));function w(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=y;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(7462),i=(t(7294),t(4137));t(9524);const r={},s="Finishing Sync",o={unversionedId:"ios-app-changes/finishing-sync",id:"ios-app-changes/finishing-sync",title:"Finishing Sync",description:"We have a problem",source:"@site/docs/3--ios-app-changes/8-finishing-sync.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/finishing-sync",permalink:"/swiftui-atlas-sync-app-workshop/docs/ios-app-changes/finishing-sync",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-workshop/blob/main/docs/3--ios-app-changes/8-finishing-sync.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding ownerId",permalink:"/swiftui-atlas-sync-app-workshop/docs/ios-app-changes/adding-owner-id"},next:{title:"Checking our data",permalink:"/swiftui-atlas-sync-app-workshop/docs/category/checking-our-data"}},l={},d=[{value:"Fixing the model: remove Days class",id:"fixing-the-model-remove-days-class",level:2},{value:"Add ownerId field to Day class",id:"add-ownerid-field-to-day-class",level:2},{value:"Remove sync on Days and add sync info to Day",id:"remove-sync-on-days-and-add-sync-info-to-day",level:2},{value:"Set ownerId while creating a new Day",id:"set-ownerid-while-creating-a-new-day",level:2},{value:"Add ownerId when creating the initial set of Habits",id:"add-ownerid-when-creating-the-initial-set-of-habits",level:2},{value:"Testing it",id:"testing-it",level:2}],p={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"finishing-sync"},"Finishing Sync"),(0,i.kt)("p",null,"We have a problem: while syncing habits we're using our user id, but not while syncing our days. From the sync config code, these are the subscriptions we're adding:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SyncContentView.swift"',title:'"SyncContentView.swift"'},'                    subs.append(QuerySubscription<Days>(name: "user_days", query: { \n                        $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Day>())\n\n                    subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                        $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Habit>())\n')),(0,i.kt)("p",null,"When we add a ",(0,i.kt)("inlineCode",{parentName:"p"},"Day")," we never set the ",(0,i.kt)("inlineCode",{parentName:"p"},"ownerId")," because our model class ",(0,i.kt)("inlineCode",{parentName:"p"},"Day")," doesn't have it. So when we insert a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Day")," it will appear for all users, as we're getting ",(0,i.kt)("inlineCode",{parentName:"p"},"Day")," from all users, because we're not restricting the sync here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SyncContentView.swift"',title:'"SyncContentView.swift"'},"                    subs.append(QuerySubscription<Day>())\n")),(0,i.kt)("p",null,"So we need to do two things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"subscribe just to our Days"),(0,i.kt)("li",{parentName:"ul"},"add the ",(0,i.kt)("inlineCode",{parentName:"li"},"ownnerId")," when we create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"Day"))),(0,i.kt)("h2",{id:"fixing-the-model-remove-days-class"},"Fixing the model: remove Days class"),(0,i.kt)("p",null,"Let's get rid of Days, as we don't really use that class for anything."),(0,i.kt)("h2",{id:"add-ownerid-field-to-day-class"},"Add ownerId field to Day class"),(0,i.kt)("p",null,"We;ll add the ",(0,i.kt)("inlineCode",{parentName:"p"},"ownerId")," field to the Day class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="Day.swift"',title:'"Day.swift"'},'import Foundation\nimport RealmSwift\n\npublic class Day: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var date = Date()\n    @Persisted var habits = RealmSwift.List<Habit>()\n\n    @Persisted var ownerId = ""\n\n    // ... same as before\n')),(0,i.kt)("h2",{id:"remove-sync-on-days-and-add-sync-info-to-day"},"Remove sync on Days and add sync info to Day"),(0,i.kt)("p",null,"We'll delete the sync subscription on ",(0,i.kt)("inlineCode",{parentName:"p"},"Days")," (as we just deleted that class) and add the correct subscription for ",(0,i.kt)("inlineCode",{parentName:"p"},"Day"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SyncContentView.swift"',title:'"SyncContentView.swift"'},'        if let foundSubscription = subs.first(named: "user_days") {\n            return\n        } else {\n            subs.append(QuerySubscription<Day>(name: "user_days", query: {\n                $0.ownerId == user.id\n            }))\n\n            subs.append(QuerySubscription<Habits>(name: "user_habits", query: {\n                $0.ownerId == user.id\n            }))\n            subs.append(QuerySubscription<Habit>())\n        }\n')),(0,i.kt)("h2",{id:"set-ownerid-while-creating-a-new-day"},"Set ownerId while creating a new Day"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="DaysView.swift"',title:'"DaysView.swift"'},'    let day = Day.createDayWithHabitsInRealm(realm: realm)\n\n    day.ownerId = realm.syncSession?.parentUser()?.id ?? ""\n    try? realm.write({\n        $days.append(day)\n    })\n')),(0,i.kt)("h2",{id:"add-ownerid-when-creating-the-initial-set-of-habits"},"Add ownerId when creating the initial set of Habits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="MainView.swift"',title:'"MainView.swift"'},'    ProgressView()\n        .onAppear {\n            let habits = Habits()\n            habits.ownerId = realm.syncSession?.parentUser()?.id ?? ""\n            $allHabitGroups.append(habits)\n        }\n')),(0,i.kt)("h2",{id:"testing-it"},"Testing it"),(0,i.kt)("p",null,"Now if we run the app new days are not appearing in other users' apps."))}u.isMDXComponent=!0}}]);