"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[657],{103:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var t=i(5893),s=i(1151);i(9524);const o={},a="Flexible configuration",r={id:"ios-app-changes/flexible-configuration",title:"Flexible configuration",description:"Configuring Flexible Configuration",source:"@site/docs/3--ios-app-changes/4-flexible-configuration.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/flexible-configuration",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/flexible-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/4-flexible-configuration.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Running the App",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/running-app"},next:{title:"Adding the Flexible Sync Configuration",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/adding-config-realm"}},c={},u=[{value:"Configuring Flexible Configuration",id:"configuring-flexible-configuration",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"flexible-configuration",children:"Flexible configuration"}),"\n",(0,t.jsx)(n.h2,{id:"configuring-flexible-configuration",children:"Configuring Flexible Configuration"}),"\n",(0,t.jsx)(n.p,{children:"We'll add code to configure our connection from Mobile to MongoDB Atlas in a way that only data for this user is requested. This way we avoid downloading data from other users and the connection is much more efficient."}),"\n",(0,t.jsxs)(n.p,{children:["To do that, once we have a ",(0,t.jsx)(n.code,{children:"user"})," logged in, we add a ",(0,t.jsx)(n.code,{children:"flexibleSyncConfiguration"})," to that user. This contains a list of subscriptions (called ",(0,t.jsx)(n.code,{children:"subs"})," here). Each subscription is a query and can be much more complex than showcased here. For instance, we can be interested in data for this user, but just the last three months, not all data."]}),"\n",(0,t.jsxs)(n.p,{children:["Each subscription has an identifier, and here we'll only have one, called ",(0,t.jsx)(n.code,{children:"user_days"}),". We're using the queryable field ",(0,t.jsx)(n.code,{children:"ownerId"})," that we added to our subscriptions in ",(0,t.jsx)(n.a,{href:"/docs/app-services/device-sync",children:"App Services > Flexible Configuration > Configure Queryable Fields"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="SyncContentView.swift"',children:"// ...\nif let user = app.currentUser {\n        // Create a `flexibleSyncConfiguration` with `initialSubscriptions`.\n        // We'll inject this configuration as an environment value to use when opening the realm\n        // in the next view, and the realm will open with these initial subscriptions.\n        let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in\n        // Check whether the subscription already exists. Adding it more\n        // than once causes an error.\n        if let foundSubscriptions = subs.first(named: \"user_days\") {\n                // Existing subscription found - do nothing\n                return\n        } else {\n               // Add queries for any objects you want to use in the app\n                    // Linked objects do not automatically get queried, so you\n                    // must explicitly query for all linked objects you want to include\n                    subs.append(QuerySubscription<Days>(name: \"user_days\", query: {\n                    // Query for objects where the ownerId is equal to the app's current user's id\n                    // This means the app's current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Day>())\n                    subs.append(QuerySubscription<Habits>(name: \"user_habits\", query: {\n                    // Query for objects where the ownerId is equal to the app's current user's id\n                    // This means the app's current user can read and write their own data\n                    $0.ownerId == user.id\n                    }))\n                    subs.append(QuerySubscription<Habit>())\n        }\n        })\n} else {\n        // ...\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var t=i(7294);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);