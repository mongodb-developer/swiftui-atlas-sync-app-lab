"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[673],{9938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var i=t(5893),s=t(1151);const o={},a="SyncContentView",r={id:"ios-app-changes/synccontentview",title:"SyncContentView",description:"Create SyncContentView",source:"@site/docs/3--ios-app-changes/2-synccontentview.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/synccontentview",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/synccontentview",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/3--ios-app-changes/2-synccontentview.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add an App id",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/add-app-id"},next:{title:"Running the App",permalink:"/swiftui-atlas-sync-app-lab/docs/ios-app-changes/running-app"}},c={},p=[{value:"Create SyncContentView",id:"create-synccontentview",level:2},{value:"SyncContentView Preview",id:"synccontentview-preview",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"synccontentview",children:"SyncContentView"}),"\n",(0,i.jsx)(n.h2,{id:"create-synccontentview",children:"Create SyncContentView"}),"\n",(0,i.jsx)(n.p,{children:"This view observes the Realm app object. Either directs the user to login, or opens a realm with a logged-in user."}),"\n",(0,i.jsxs)(n.p,{children:["The 1st time we open the app there is no logged in user, so we'll check ",(0,i.jsx)(n.code,{children:"app.currentUser"})," and show the ",(0,i.jsx)(n.code,{children:"ProgressView"}),". This ",(0,i.jsx)(n.code,{children:"ProgressView"})," will run an async task to ",(0,i.jsx)(n.code,{children:"await"})," our app to login, using the Atlas App. Here we use ",(0,i.jsx)(n.code,{children:".anonymous"})," authentication, although we have several other ways to do authentication (configurable in Atlas)."]}),"\n",(0,i.jsxs)(n.p,{children:["Once the login succeeds, there will be a user in ",(0,i.jsx)(n.code,{children:"app.currentUser"}),". As we're observing changes in ",(0,i.jsx)(n.code,{children:"app"}),", we'll enter the ",(0,i.jsx)(n.code,{children:"if"}),' part and show a "Logged In!" ',(0,i.jsx)(n.code,{children:"Text"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:"title='SyncContentView.swift' ",children:'import SwiftUI\nimport RealmSwift\n\nstruct SyncContentView: View {\n    // Observe the Realm app object in order to react to login state changes.\n    @ObservedObject var app: RealmSwift.App\n\n    var body: some View {\n        if let user = app.currentUser {\n            // If there is a user logged in\n            Text("Logged in \\(user)")\n        } else {\n            // If there is no user logged in, show the login view.\n            ProgressView()\n                .task{\n                    do {\n                        let myUser = try await app.login(credentials: .anonymous)\n                    } catch {\n                        print("\\(error)")\n                    }\n                }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"synccontentview-preview",children:"SyncContentView Preview"}),"\n",(0,i.jsxs)(n.p,{children:["We need to inject an App, as SyncContentView observes the Realm app object, so we create a dummy ",(0,i.jsx)(n.code,{children:"RealmSwift.App"})," with no App ID."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:"title='SyncContentView.swift' ",children:'struct SyncContentView_Previews: PreviewProvider {\n\n    static let app: RealmSwift.App? = RealmSwift.App(id: "none")\n\n    static var previews: some View {\n        SyncContentView(app: app!)\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);