"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[591],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,p=function(e,t){if(null==e)return{};var n,a,p={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,p=e.mdxType,r=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(n),f=p,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||r;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var r=n.length,i=new Array(r);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:p,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),p=(n(7294),n(4137));const r={},i="Add an App id",o={unversionedId:"ios-app-changes/add-app-id",id:"ios-app-changes/add-app-id",title:"Add an App id",description:"App id",source:"@site/docs/3--ios-app-changes/1-add-app-id.mdx",sourceDirName:"3--ios-app-changes",slug:"/ios-app-changes/add-app-id",permalink:"/swiftui-atlas-sync-app-workshop/docs/ios-app-changes/add-app-id",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-workshop/blob/main/docs/3--ios-app-changes/1-add-app-id.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"iOS App Changes",permalink:"/swiftui-atlas-sync-app-workshop/docs/category/ios-app-changes"},next:{title:"SyncContentView",permalink:"/swiftui-atlas-sync-app-workshop/docs/ios-app-changes/synccontentview"}},s={},c=[{value:"App id",id:"app-id",level:2},{value:"SyncContentView",id:"synccontentview",level:2}],l={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,p.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"add-an-app-id"},"Add an App id"),(0,p.kt)("h2",{id:"app-id"},"App id"),(0,p.kt)("p",null,"In the App, we'll add a reference to the Atlas Services App we've created before. In App Services, ",(0,p.kt)("a",{parentName:"p",href:"/docs/app-services/create-a-new-app#app-id"},"find and copy the App ID"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='GoodHabitsRealmApp.swift'",title:"'GoodHabitsRealmApp.swift'"},'    let app: RealmSwift.App? = RealmSwift.App(id: "My App Id")\n')),(0,p.kt)("h2",{id:"synccontentview"},"SyncContentView"),(0,p.kt)("p",null,"To wait for the connection, do login, etc. we'll use a view that will take care of the different connection states our app will have. This new View is called ",(0,p.kt)("a",{parentName:"p",href:"/docs/ios-app-changes/synccontentview"},(0,p.kt)("inlineCode",{parentName:"a"},"SyncContentView")),", son we'll show that on App Startup."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='GoodHabitsRealmApp.swift'",title:"'GoodHabitsRealmApp.swift'"},'import SwiftUI\nimport RealmSwift\n\n@main\nstruct GoodHabitsRealmAppApp: SwiftUI.App {\n\n    let app: RealmSwift.App? = RealmSwift.App(id: "My App Id")\n\n    var body: some Scene {\n        WindowGroup {\n            SyncContentView(app: app!)\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);