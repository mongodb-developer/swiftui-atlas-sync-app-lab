"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[658],{4894:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>p,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var t=s(5893),i=s(1151);const a={},p="Exploring the App",c={id:"app-services/exploring-the-app",title:"Exploring the App",description:"We'll review some parts of the menu.",source:"@site/docs/2-app-services/2-exploring-the-app.mdx",sourceDirName:"2-app-services",slug:"/app-services/exploring-the-app",permalink:"/swiftui-atlas-sync-app-lab/docs/app-services/exploring-the-app",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-sync-app-lab/blob/main/docs/2-app-services/2-exploring-the-app.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create a new App",permalink:"/swiftui-atlas-sync-app-lab/docs/app-services/create-a-new-app"},next:{title:"Device Sync",permalink:"/swiftui-atlas-sync-app-lab/docs/app-services/device-sync"}},o={},r=[{value:"Schema",id:"schema",level:2},{value:"App Users",id:"app-users",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Deploying changes",id:"deploying-changes",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"exploring-the-app",children:"Exploring the App"}),"\n",(0,t.jsx)(n.p,{children:"We'll review some parts of the menu."}),"\n",(0,t.jsx)(n.h2,{id:"schema",children:"Schema"}),"\n",(0,t.jsxs)(n.p,{children:["If we click on ",(0,t.jsx)(n.code,{children:"Schema"})," we'll see the schema of the collections that Atlas Device Sync has created based on the classes in our Mobile app. As we haven't (yet) connected our mobile app to this App Service."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(9456).Z+"",width:"495",height:"585"})}),"\n",(0,t.jsx)(n.p,{children:"We can either create a schema manually or let App Services create the schema for us, based on the definition of the classes in our mobile app."}),"\n",(0,t.jsx)(n.h2,{id:"app-users",children:"App Users"}),"\n",(0,t.jsx)(n.p,{children:"Here we'll see the users as they log from our mobile apps. Right now is empty, as nobody has connected yet to our App Service."}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["All the service providers our Mobile app can use. They are all disabled. In our app, we'll use log in anonymously. Click on the ",(0,t.jsx)(n.code,{children:"Edit"})," button and enable the provider. Save the changes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(4001).Z+"",width:"980",height:"279"})}),"\n",(0,t.jsx)(n.h2,{id:"deploying-changes",children:"Deploying changes"}),"\n",(0,t.jsxs)(n.p,{children:["When we change something in App Services, the changes really don't take place immediately. Instead, we have the opportunity to review them before deploying. Click on ",(0,t.jsx)(n.code,{children:"Review Draft and Deploy"})," and ",(0,t.jsx)(n.code,{children:"Deploy"})," the changes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(7947).Z+"",width:"623",height:"58"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},4001:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/authentication-bc175fe7a8562071880a016495f732d7.png"},7947:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/deploy-2cce9833c30a173b6d2e354ad9024d03.png"},9456:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/empty-schema-5e0f43e9b01be47108046b3c99be7cbc.png"},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>p});var t=s(7294);const i={},a=t.createContext(i);function p(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:p(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);